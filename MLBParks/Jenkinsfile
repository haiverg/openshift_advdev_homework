// Jenkinsfile for MLBParks
podTemplate(
  label: "maven-appdev",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) 

{
  node('maven-appdev') 
  {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `MLBParks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

    def appDir = "MLBParks"
  
     //Checkout Source Code 
     stage('Checkout Source'){
          checkout scm
     }
  
    //Extract version and other properties from the pom.xml

    dir(appDir)
    {
      def appName = getArtifactIdFromPom("pom.xml")
      def appVer = getVersionFromPom("pom.xml")
      //Set the tag for the development image: version + build number
      def devTag  = "${appVer}-${BUILD_NUMBER}"
      //Set the tag for the production image: version
      def prodTag = "${appVer}"
      def devProj = "${GUID}-parks-dev"
      def prodProj = "${GUID}-parks-prod"
      def mvnCmd = "mvn -s ./nexus_settings.xml"
    
      echo "Copy modified nexus_settings.xml to current directory"
      sh "sed 's/GUID/${GUID}/' ../nexus_settings.xml > ./nexus_settings.xml"


      // Build app
      stage("Build") { 
          sh "${mvnCmd} clean package -DskipTests"
      }

      // Run unit & code coverage analysis tests in parallel
      stage('Run Tests') {
        parallel (
          "Run Unit tests": {
            sh "${mvnCmd} test"
          },
          "Run code analysis tests": {
            def SONAR_URL = "http://sonarqube.${GUID}-sonarqube.svc:9000"
            sh "${mvnCmd} sonar:sonar -Dsonar.host.url=${SONAR_URL} -Dsonar.projectName=${appName}-${devTag}"
          }
        )
      }

      stage('Publish artifact to Nexus') {
          def NEXUS_URL = "http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
          sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::${NEXUS_URL}"
      }

      stage('Build image') {
          echo "Building OpenShift container image ${appName}:${devTag}"        
          //sh "oc start-build ${appName} --from-file=./target/${appName}.war --follow -n ${devProj}"
          def NEXUS_URL = "http://nexus3-${GUID}-nexus.svc.cluster.local:8081/repository/releases/com/openshift/evg/roadshow/mlbparks"
          //def NEXUS_URL = "http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases/com/openshift/evg/roadshow/mlbparks"
          sh "oc start-build ${appName} --follow --from-file=${NEXUS_URL}/${version}/mlbparks-${version}.war -n ${devProj}"  
          // tag image with version and build Number (devTag)
          openshiftTag  alias: 'false', 
                      srcStream: appName,
                      destStream: appName,
                      srcTag: 'latest',
                      destTag: devTag, 
                      namespace: devProj,
                      destinationNamespace: devProj,
                      verbose: 'false'
      }






    }
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
